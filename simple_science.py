

def player_science_selected(sim, player_id, event):
    selected = sim.get_space_object(event.selected_id)
    my_ship  = sim.get_space_object(event.origin_id)
    if selected is None or my_ship is None:
        return
    blob = my_ship.data_set
    blob.set("science_target_UID", event.selected_id,0)
    temp_id = blob.get("science_target_UID",0)
    print (f"science_target_UID now:  {event.selected_id}  {temp_id}")

    #what type of scan is it?
    scan_type = event.extra_tag
    side_tag = my_ship.side
    scan_string = side_tag + scan_type

    #is this space object already scanned, for my side and for that scan type?
    target_blob = selected.data_set
    last_scan_string = target_blob.get(scan_string,0)
    if None == last_scan_string:
        # unscanned, so let's scan it now!
        # cur_scan_speed_coeff is normally already set 
        blob.set("cur_scan_ID",event.selected_id,0,"space object ID, the space object currently being scanned by this player ship")
        blob.set("cur_scan_type",event.extra_tag,0,"string tag, type of scan this player ship is currently performing")
        blob.set("cur_scan_percent",0.0,0,"Progress of the current scan by this player ship (0.0-1.0)")

        if my_ship.side == selected.side: # if this target is already on my side
            blob.set("cur_scan_percent",0.999,0,"")

def player_science_message(sim, message, player_id, event):
    print (f"handle_science_scan_complete now:  {event.selected_id}  {event.origin_id}")
    # This event is sent from the c++ code, once, when a space object scan is completed
    selected = sim.get_space_object(event.selected_id)
    my_ship  = sim.get_space_object(event.origin_id)
    if selected != None and my_ship != None:
        blob = my_ship.data_set
        # concentate the scanner's side and the scan type
        scan_type = event.extra_tag
        side_tag = my_ship.side
        scan_string = side_tag + scan_type

        #change the text of the side/scan for the target
        target_blob = selected.data_set
        if "scan" == scan_type:
#			if selected.side != my_ship.side:
#				target_blob.set(side_tag + "2d_color", "red")
            target_blob.set(scan_string,"This space object is now scanned, in the most general way. This text was generated by the script.",0,"string, scan description of the space object, for the side and scan type")
        if "intel" == scan_type:
            target_blob.set(scan_string,"This space object is detailed in the ship's computer banks. This text was generated by the script.",0,"string, scan description of the space object, for the side and scan type")
        if "bio" == scan_type:
            target_blob.set(scan_string,"This space object has indeterminate life signs. This text was generated by the script.",0,"string, scan description of the space object, for the side and scan type")
        if "signl" == scan_type:
            target_blob.set(scan_string,"This space object radiating signals. This text was generated by the script.",0,"string, scan description of the space object, for the side and scan type")

        target_blob.set("scan_type_list","intel bio signl",0,"string, list of scan types allowed for this space object")

